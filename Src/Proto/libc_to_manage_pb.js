// source: libc_to_manage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_types_common_types_pb = require('./common_types/common_types_pb.js');
goog.object.extend(proto, common_types_common_types_pb);
goog.exportSymbol('proto.libctomanage.DeleteSharesRequest', null, global);
goog.exportSymbol('proto.libctomanage.DeleteSharesResponse', null, global);
goog.exportSymbol('proto.libctomanage.ExecuteComputationRequest', null, global);
goog.exportSymbol('proto.libctomanage.ExecuteComputationResponse', null, global);
goog.exportSymbol('proto.libctomanage.GetComputationResultRequest', null, global);
goog.exportSymbol('proto.libctomanage.GetComputationResultResponse', null, global);
goog.exportSymbol('proto.libctomanage.GetDataListRequest', null, global);
goog.exportSymbol('proto.libctomanage.GetDataListResponse', null, global);
goog.exportSymbol('proto.libctomanage.GetSchemaRequest', null, global);
goog.exportSymbol('proto.libctomanage.GetSchemaResponse', null, global);
goog.exportSymbol('proto.libctomanage.Input', null, global);
goog.exportSymbol('proto.libctomanage.JoinOrder', null, global);
goog.exportSymbol('proto.libctomanage.PredictRequest', null, global);
goog.exportSymbol('proto.libctomanage.PredictResponse', null, global);
goog.exportSymbol('proto.libctomanage.SendModelParamRequest', null, global);
goog.exportSymbol('proto.libctomanage.SendModelParamResponse', null, global);
goog.exportSymbol('proto.libctomanage.SendSharesRequest', null, global);
goog.exportSymbol('proto.libctomanage.SendSharesResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.SendSharesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.libctomanage.SendSharesRequest.repeatedFields_, null);
};
goog.inherits(proto.libctomanage.SendSharesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.SendSharesRequest.displayName = 'proto.libctomanage.SendSharesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.SendSharesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libctomanage.SendSharesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.SendSharesResponse.displayName = 'proto.libctomanage.SendSharesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.DeleteSharesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.libctomanage.DeleteSharesRequest.repeatedFields_, null);
};
goog.inherits(proto.libctomanage.DeleteSharesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.DeleteSharesRequest.displayName = 'proto.libctomanage.DeleteSharesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.DeleteSharesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libctomanage.DeleteSharesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.DeleteSharesResponse.displayName = 'proto.libctomanage.DeleteSharesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.GetSchemaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libctomanage.GetSchemaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.GetSchemaRequest.displayName = 'proto.libctomanage.GetSchemaRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.GetSchemaResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.libctomanage.GetSchemaResponse.repeatedFields_, null);
};
goog.inherits(proto.libctomanage.GetSchemaResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.GetSchemaResponse.displayName = 'proto.libctomanage.GetSchemaResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.JoinOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.libctomanage.JoinOrder.repeatedFields_, null);
};
goog.inherits(proto.libctomanage.JoinOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.JoinOrder.displayName = 'proto.libctomanage.JoinOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.Input = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.libctomanage.Input.repeatedFields_, null);
};
goog.inherits(proto.libctomanage.Input, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.Input.displayName = 'proto.libctomanage.Input';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.ExecuteComputationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libctomanage.ExecuteComputationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.ExecuteComputationRequest.displayName = 'proto.libctomanage.ExecuteComputationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.ExecuteComputationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libctomanage.ExecuteComputationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.ExecuteComputationResponse.displayName = 'proto.libctomanage.ExecuteComputationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.GetComputationResultRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libctomanage.GetComputationResultRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.GetComputationResultRequest.displayName = 'proto.libctomanage.GetComputationResultRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.GetComputationResultResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libctomanage.GetComputationResultResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.GetComputationResultResponse.displayName = 'proto.libctomanage.GetComputationResultResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.SendModelParamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libctomanage.SendModelParamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.SendModelParamRequest.displayName = 'proto.libctomanage.SendModelParamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.SendModelParamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libctomanage.SendModelParamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.SendModelParamResponse.displayName = 'proto.libctomanage.SendModelParamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.PredictRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.libctomanage.PredictRequest.repeatedFields_, null);
};
goog.inherits(proto.libctomanage.PredictRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.PredictRequest.displayName = 'proto.libctomanage.PredictRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.PredictResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libctomanage.PredictResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.PredictResponse.displayName = 'proto.libctomanage.PredictResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.GetDataListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libctomanage.GetDataListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.GetDataListRequest.displayName = 'proto.libctomanage.GetDataListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libctomanage.GetDataListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libctomanage.GetDataListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libctomanage.GetDataListResponse.displayName = 'proto.libctomanage.GetDataListResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.libctomanage.SendSharesRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.SendSharesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.SendSharesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.SendSharesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.SendSharesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shares: jspb.Message.getFieldWithDefault(msg, 2, ""),
    schemaList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    pieceId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sentAt: jspb.Message.getFieldWithDefault(msg, 5, ""),
    token: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.SendSharesRequest}
 */
proto.libctomanage.SendSharesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.SendSharesRequest;
  return proto.libctomanage.SendSharesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.SendSharesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.SendSharesRequest}
 */
proto.libctomanage.SendSharesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShares(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addSchema(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPieceId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSentAt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.SendSharesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.SendSharesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.SendSharesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.SendSharesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShares();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSchemaList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getPieceId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSentAt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string data_id = 1;
 * @return {string}
 */
proto.libctomanage.SendSharesRequest.prototype.getDataId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.SendSharesRequest} returns this
 */
proto.libctomanage.SendSharesRequest.prototype.setDataId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string shares = 2;
 * @return {string}
 */
proto.libctomanage.SendSharesRequest.prototype.getShares = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.SendSharesRequest} returns this
 */
proto.libctomanage.SendSharesRequest.prototype.setShares = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string schema = 3;
 * @return {!Array<string>}
 */
proto.libctomanage.SendSharesRequest.prototype.getSchemaList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.libctomanage.SendSharesRequest} returns this
 */
proto.libctomanage.SendSharesRequest.prototype.setSchemaList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.libctomanage.SendSharesRequest} returns this
 */
proto.libctomanage.SendSharesRequest.prototype.addSchema = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.libctomanage.SendSharesRequest} returns this
 */
proto.libctomanage.SendSharesRequest.prototype.clearSchemaList = function() {
  return this.setSchemaList([]);
};


/**
 * optional int32 piece_id = 4;
 * @return {number}
 */
proto.libctomanage.SendSharesRequest.prototype.getPieceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.libctomanage.SendSharesRequest} returns this
 */
proto.libctomanage.SendSharesRequest.prototype.setPieceId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string sent_at = 5;
 * @return {string}
 */
proto.libctomanage.SendSharesRequest.prototype.getSentAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.SendSharesRequest} returns this
 */
proto.libctomanage.SendSharesRequest.prototype.setSentAt = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string token = 6;
 * @return {string}
 */
proto.libctomanage.SendSharesRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.SendSharesRequest} returns this
 */
proto.libctomanage.SendSharesRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.SendSharesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.SendSharesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.SendSharesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.SendSharesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isOk: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.SendSharesResponse}
 */
proto.libctomanage.SendSharesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.SendSharesResponse;
  return proto.libctomanage.SendSharesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.SendSharesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.SendSharesResponse}
 */
proto.libctomanage.SendSharesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.SendSharesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.SendSharesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.SendSharesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.SendSharesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsOk();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.libctomanage.SendSharesResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.SendSharesResponse} returns this
 */
proto.libctomanage.SendSharesResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_ok = 2;
 * @return {boolean}
 */
proto.libctomanage.SendSharesResponse.prototype.getIsOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.libctomanage.SendSharesResponse} returns this
 */
proto.libctomanage.SendSharesResponse.prototype.setIsOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.libctomanage.DeleteSharesRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.DeleteSharesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.DeleteSharesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.DeleteSharesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.DeleteSharesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.DeleteSharesRequest}
 */
proto.libctomanage.DeleteSharesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.DeleteSharesRequest;
  return proto.libctomanage.DeleteSharesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.DeleteSharesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.DeleteSharesRequest}
 */
proto.libctomanage.DeleteSharesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addDataids(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.DeleteSharesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.DeleteSharesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.DeleteSharesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.DeleteSharesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string dataIds = 1;
 * @return {!Array<string>}
 */
proto.libctomanage.DeleteSharesRequest.prototype.getDataidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.libctomanage.DeleteSharesRequest} returns this
 */
proto.libctomanage.DeleteSharesRequest.prototype.setDataidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.libctomanage.DeleteSharesRequest} returns this
 */
proto.libctomanage.DeleteSharesRequest.prototype.addDataids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.libctomanage.DeleteSharesRequest} returns this
 */
proto.libctomanage.DeleteSharesRequest.prototype.clearDataidsList = function() {
  return this.setDataidsList([]);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.libctomanage.DeleteSharesRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.DeleteSharesRequest} returns this
 */
proto.libctomanage.DeleteSharesRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.DeleteSharesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.DeleteSharesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.DeleteSharesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.DeleteSharesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isOk: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.DeleteSharesResponse}
 */
proto.libctomanage.DeleteSharesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.DeleteSharesResponse;
  return proto.libctomanage.DeleteSharesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.DeleteSharesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.DeleteSharesResponse}
 */
proto.libctomanage.DeleteSharesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.DeleteSharesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.DeleteSharesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.DeleteSharesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.DeleteSharesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsOk();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.libctomanage.DeleteSharesResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.DeleteSharesResponse} returns this
 */
proto.libctomanage.DeleteSharesResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_ok = 2;
 * @return {boolean}
 */
proto.libctomanage.DeleteSharesResponse.prototype.getIsOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.libctomanage.DeleteSharesResponse} returns this
 */
proto.libctomanage.DeleteSharesResponse.prototype.setIsOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.GetSchemaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.GetSchemaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.GetSchemaRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.GetSchemaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.GetSchemaRequest}
 */
proto.libctomanage.GetSchemaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.GetSchemaRequest;
  return proto.libctomanage.GetSchemaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.GetSchemaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.GetSchemaRequest}
 */
proto.libctomanage.GetSchemaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.GetSchemaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.GetSchemaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.GetSchemaRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.GetSchemaRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string data_id = 1;
 * @return {string}
 */
proto.libctomanage.GetSchemaRequest.prototype.getDataId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.GetSchemaRequest} returns this
 */
proto.libctomanage.GetSchemaRequest.prototype.setDataId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.libctomanage.GetSchemaRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.GetSchemaRequest} returns this
 */
proto.libctomanage.GetSchemaRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.libctomanage.GetSchemaResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.GetSchemaResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.GetSchemaResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.GetSchemaResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.GetSchemaResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isOk: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    schemaList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.GetSchemaResponse}
 */
proto.libctomanage.GetSchemaResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.GetSchemaResponse;
  return proto.libctomanage.GetSchemaResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.GetSchemaResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.GetSchemaResponse}
 */
proto.libctomanage.GetSchemaResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOk(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.GetSchemaResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.GetSchemaResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.GetSchemaResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.GetSchemaResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsOk();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSchemaList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.libctomanage.GetSchemaResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.GetSchemaResponse} returns this
 */
proto.libctomanage.GetSchemaResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_ok = 2;
 * @return {boolean}
 */
proto.libctomanage.GetSchemaResponse.prototype.getIsOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.libctomanage.GetSchemaResponse} returns this
 */
proto.libctomanage.GetSchemaResponse.prototype.setIsOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated string schema = 3;
 * @return {!Array<string>}
 */
proto.libctomanage.GetSchemaResponse.prototype.getSchemaList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.libctomanage.GetSchemaResponse} returns this
 */
proto.libctomanage.GetSchemaResponse.prototype.setSchemaList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.libctomanage.GetSchemaResponse} returns this
 */
proto.libctomanage.GetSchemaResponse.prototype.addSchema = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.libctomanage.GetSchemaResponse} returns this
 */
proto.libctomanage.GetSchemaResponse.prototype.clearSchemaList = function() {
  return this.setSchemaList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.libctomanage.JoinOrder.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.JoinOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.JoinOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.JoinOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.JoinOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    joinList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    indexList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.JoinOrder}
 */
proto.libctomanage.JoinOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.JoinOrder;
  return proto.libctomanage.JoinOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.JoinOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.JoinOrder}
 */
proto.libctomanage.JoinOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addDataids(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addJoin(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIndex(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.JoinOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.JoinOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.JoinOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.JoinOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getJoinList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getIndexList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
};


/**
 * repeated string dataIds = 1;
 * @return {!Array<string>}
 */
proto.libctomanage.JoinOrder.prototype.getDataidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.libctomanage.JoinOrder} returns this
 */
proto.libctomanage.JoinOrder.prototype.setDataidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.libctomanage.JoinOrder} returns this
 */
proto.libctomanage.JoinOrder.prototype.addDataids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.libctomanage.JoinOrder} returns this
 */
proto.libctomanage.JoinOrder.prototype.clearDataidsList = function() {
  return this.setDataidsList([]);
};


/**
 * repeated int32 join = 2;
 * @return {!Array<number>}
 */
proto.libctomanage.JoinOrder.prototype.getJoinList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.libctomanage.JoinOrder} returns this
 */
proto.libctomanage.JoinOrder.prototype.setJoinList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.libctomanage.JoinOrder} returns this
 */
proto.libctomanage.JoinOrder.prototype.addJoin = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.libctomanage.JoinOrder} returns this
 */
proto.libctomanage.JoinOrder.prototype.clearJoinList = function() {
  return this.setJoinList([]);
};


/**
 * repeated int32 index = 3;
 * @return {!Array<number>}
 */
proto.libctomanage.JoinOrder.prototype.getIndexList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.libctomanage.JoinOrder} returns this
 */
proto.libctomanage.JoinOrder.prototype.setIndexList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.libctomanage.JoinOrder} returns this
 */
proto.libctomanage.JoinOrder.prototype.addIndex = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.libctomanage.JoinOrder} returns this
 */
proto.libctomanage.JoinOrder.prototype.clearIndexList = function() {
  return this.setIndexList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.libctomanage.Input.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.Input.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.Input.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.Input} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.Input.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    targetList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.Input}
 */
proto.libctomanage.Input.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.Input;
  return proto.libctomanage.Input.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.Input} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.Input}
 */
proto.libctomanage.Input.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSrc(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTarget(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.Input.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.Input.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.Input} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.Input.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getTargetList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * repeated int32 src = 1;
 * @return {!Array<number>}
 */
proto.libctomanage.Input.prototype.getSrcList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.libctomanage.Input} returns this
 */
proto.libctomanage.Input.prototype.setSrcList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.libctomanage.Input} returns this
 */
proto.libctomanage.Input.prototype.addSrc = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.libctomanage.Input} returns this
 */
proto.libctomanage.Input.prototype.clearSrcList = function() {
  return this.setSrcList([]);
};


/**
 * repeated int32 target = 2;
 * @return {!Array<number>}
 */
proto.libctomanage.Input.prototype.getTargetList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.libctomanage.Input} returns this
 */
proto.libctomanage.Input.prototype.setTargetList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.libctomanage.Input} returns this
 */
proto.libctomanage.Input.prototype.addTarget = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.libctomanage.Input} returns this
 */
proto.libctomanage.Input.prototype.clearTargetList = function() {
  return this.setTargetList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.ExecuteComputationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.ExecuteComputationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.ExecuteComputationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.ExecuteComputationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    methodId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    table: (f = msg.getTable()) && proto.libctomanage.JoinOrder.toObject(includeInstance, f),
    arg: (f = msg.getArg()) && proto.libctomanage.Input.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.ExecuteComputationRequest}
 */
proto.libctomanage.ExecuteComputationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.ExecuteComputationRequest;
  return proto.libctomanage.ExecuteComputationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.ExecuteComputationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.ExecuteComputationRequest}
 */
proto.libctomanage.ExecuteComputationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb_common_types.ComputationMethod} */ (reader.readEnum());
      msg.setMethodId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = new proto.libctomanage.JoinOrder;
      reader.readMessage(value,proto.libctomanage.JoinOrder.deserializeBinaryFromReader);
      msg.setTable(value);
      break;
    case 4:
      var value = new proto.libctomanage.Input;
      reader.readMessage(value,proto.libctomanage.Input.deserializeBinaryFromReader);
      msg.setArg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.ExecuteComputationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.ExecuteComputationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.ExecuteComputationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.ExecuteComputationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethodId();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTable();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.libctomanage.JoinOrder.serializeBinaryToWriter
    );
  }
  f = message.getArg();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.libctomanage.Input.serializeBinaryToWriter
    );
  }
};


/**
 * optional pb_common_types.ComputationMethod method_id = 1;
 * @return {!proto.pb_common_types.ComputationMethod}
 */
proto.libctomanage.ExecuteComputationRequest.prototype.getMethodId = function() {
  return /** @type {!proto.pb_common_types.ComputationMethod} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb_common_types.ComputationMethod} value
 * @return {!proto.libctomanage.ExecuteComputationRequest} returns this
 */
proto.libctomanage.ExecuteComputationRequest.prototype.setMethodId = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.libctomanage.ExecuteComputationRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.ExecuteComputationRequest} returns this
 */
proto.libctomanage.ExecuteComputationRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional JoinOrder table = 3;
 * @return {?proto.libctomanage.JoinOrder}
 */
proto.libctomanage.ExecuteComputationRequest.prototype.getTable = function() {
  return /** @type{?proto.libctomanage.JoinOrder} */ (
    jspb.Message.getWrapperField(this, proto.libctomanage.JoinOrder, 3));
};


/**
 * @param {?proto.libctomanage.JoinOrder|undefined} value
 * @return {!proto.libctomanage.ExecuteComputationRequest} returns this
*/
proto.libctomanage.ExecuteComputationRequest.prototype.setTable = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.libctomanage.ExecuteComputationRequest} returns this
 */
proto.libctomanage.ExecuteComputationRequest.prototype.clearTable = function() {
  return this.setTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.libctomanage.ExecuteComputationRequest.prototype.hasTable = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Input arg = 4;
 * @return {?proto.libctomanage.Input}
 */
proto.libctomanage.ExecuteComputationRequest.prototype.getArg = function() {
  return /** @type{?proto.libctomanage.Input} */ (
    jspb.Message.getWrapperField(this, proto.libctomanage.Input, 4));
};


/**
 * @param {?proto.libctomanage.Input|undefined} value
 * @return {!proto.libctomanage.ExecuteComputationRequest} returns this
*/
proto.libctomanage.ExecuteComputationRequest.prototype.setArg = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.libctomanage.ExecuteComputationRequest} returns this
 */
proto.libctomanage.ExecuteComputationRequest.prototype.clearArg = function() {
  return this.setArg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.libctomanage.ExecuteComputationRequest.prototype.hasArg = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.ExecuteComputationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.ExecuteComputationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.ExecuteComputationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.ExecuteComputationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isOk: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    jobUuid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.ExecuteComputationResponse}
 */
proto.libctomanage.ExecuteComputationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.ExecuteComputationResponse;
  return proto.libctomanage.ExecuteComputationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.ExecuteComputationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.ExecuteComputationResponse}
 */
proto.libctomanage.ExecuteComputationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOk(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.ExecuteComputationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.ExecuteComputationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.ExecuteComputationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.ExecuteComputationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsOk();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getJobUuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.libctomanage.ExecuteComputationResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.ExecuteComputationResponse} returns this
 */
proto.libctomanage.ExecuteComputationResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_ok = 2;
 * @return {boolean}
 */
proto.libctomanage.ExecuteComputationResponse.prototype.getIsOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.libctomanage.ExecuteComputationResponse} returns this
 */
proto.libctomanage.ExecuteComputationResponse.prototype.setIsOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string job_uuid = 3;
 * @return {string}
 */
proto.libctomanage.ExecuteComputationResponse.prototype.getJobUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.ExecuteComputationResponse} returns this
 */
proto.libctomanage.ExecuteComputationResponse.prototype.setJobUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.GetComputationResultRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.GetComputationResultRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.GetComputationResultRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.GetComputationResultRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobUuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.GetComputationResultRequest}
 */
proto.libctomanage.GetComputationResultRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.GetComputationResultRequest;
  return proto.libctomanage.GetComputationResultRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.GetComputationResultRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.GetComputationResultRequest}
 */
proto.libctomanage.GetComputationResultRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.GetComputationResultRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.GetComputationResultRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.GetComputationResultRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.GetComputationResultRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string job_uuid = 1;
 * @return {string}
 */
proto.libctomanage.GetComputationResultRequest.prototype.getJobUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.GetComputationResultRequest} returns this
 */
proto.libctomanage.GetComputationResultRequest.prototype.setJobUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.libctomanage.GetComputationResultRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.GetComputationResultRequest} returns this
 */
proto.libctomanage.GetComputationResultRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.GetComputationResultResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.GetComputationResultResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.GetComputationResultResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.GetComputationResultResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isOk: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    result: jspb.Message.getFieldWithDefault(msg, 3, ""),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pieceId: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.GetComputationResultResponse}
 */
proto.libctomanage.GetComputationResultResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.GetComputationResultResponse;
  return proto.libctomanage.GetComputationResultResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.GetComputationResultResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.GetComputationResultResponse}
 */
proto.libctomanage.GetComputationResultResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOk(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 4:
      var value = /** @type {!proto.pb_common_types.JobStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPieceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.GetComputationResultResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.GetComputationResultResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.GetComputationResultResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.GetComputationResultResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsOk();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getPieceId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.libctomanage.GetComputationResultResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.GetComputationResultResponse} returns this
 */
proto.libctomanage.GetComputationResultResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_ok = 2;
 * @return {boolean}
 */
proto.libctomanage.GetComputationResultResponse.prototype.getIsOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.libctomanage.GetComputationResultResponse} returns this
 */
proto.libctomanage.GetComputationResultResponse.prototype.setIsOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string result = 3;
 * @return {string}
 */
proto.libctomanage.GetComputationResultResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.GetComputationResultResponse} returns this
 */
proto.libctomanage.GetComputationResultResponse.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional pb_common_types.JobStatus status = 4;
 * @return {!proto.pb_common_types.JobStatus}
 */
proto.libctomanage.GetComputationResultResponse.prototype.getStatus = function() {
  return /** @type {!proto.pb_common_types.JobStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.pb_common_types.JobStatus} value
 * @return {!proto.libctomanage.GetComputationResultResponse} returns this
 */
proto.libctomanage.GetComputationResultResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 piece_id = 5;
 * @return {number}
 */
proto.libctomanage.GetComputationResultResponse.prototype.getPieceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.libctomanage.GetComputationResultResponse} returns this
 */
proto.libctomanage.GetComputationResultResponse.prototype.setPieceId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.SendModelParamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.SendModelParamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.SendModelParamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.SendModelParamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobUuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    params: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pieceId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    token: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.SendModelParamRequest}
 */
proto.libctomanage.SendModelParamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.SendModelParamRequest;
  return proto.libctomanage.SendModelParamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.SendModelParamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.SendModelParamRequest}
 */
proto.libctomanage.SendModelParamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setParams(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPieceId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.SendModelParamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.SendModelParamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.SendModelParamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.SendModelParamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParams();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPieceId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string job_uuid = 1;
 * @return {string}
 */
proto.libctomanage.SendModelParamRequest.prototype.getJobUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.SendModelParamRequest} returns this
 */
proto.libctomanage.SendModelParamRequest.prototype.setJobUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string params = 2;
 * @return {string}
 */
proto.libctomanage.SendModelParamRequest.prototype.getParams = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.SendModelParamRequest} returns this
 */
proto.libctomanage.SendModelParamRequest.prototype.setParams = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 piece_id = 3;
 * @return {number}
 */
proto.libctomanage.SendModelParamRequest.prototype.getPieceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.libctomanage.SendModelParamRequest} returns this
 */
proto.libctomanage.SendModelParamRequest.prototype.setPieceId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string token = 4;
 * @return {string}
 */
proto.libctomanage.SendModelParamRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.SendModelParamRequest} returns this
 */
proto.libctomanage.SendModelParamRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.SendModelParamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.SendModelParamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.SendModelParamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.SendModelParamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isOk: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.SendModelParamResponse}
 */
proto.libctomanage.SendModelParamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.SendModelParamResponse;
  return proto.libctomanage.SendModelParamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.SendModelParamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.SendModelParamResponse}
 */
proto.libctomanage.SendModelParamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.SendModelParamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.SendModelParamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.SendModelParamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.SendModelParamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsOk();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.libctomanage.SendModelParamResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.SendModelParamResponse} returns this
 */
proto.libctomanage.SendModelParamResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_ok = 2;
 * @return {boolean}
 */
proto.libctomanage.SendModelParamResponse.prototype.getIsOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.libctomanage.SendModelParamResponse} returns this
 */
proto.libctomanage.SendModelParamResponse.prototype.setIsOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.libctomanage.PredictRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.PredictRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.PredictRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.PredictRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.PredictRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobUuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    modelParamJobUuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    modelId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    table: (f = msg.getTable()) && proto.libctomanage.JoinOrder.toObject(includeInstance, f),
    srcList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    token: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.PredictRequest}
 */
proto.libctomanage.PredictRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.PredictRequest;
  return proto.libctomanage.PredictRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.PredictRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.PredictRequest}
 */
proto.libctomanage.PredictRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelParamJobUuid(value);
      break;
    case 3:
      var value = /** @type {!proto.pb_common_types.PredictMethod} */ (reader.readEnum());
      msg.setModelId(value);
      break;
    case 4:
      var value = new proto.libctomanage.JoinOrder;
      reader.readMessage(value,proto.libctomanage.JoinOrder.deserializeBinaryFromReader);
      msg.setTable(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSrc(values[i]);
      }
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.PredictRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.PredictRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.PredictRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.PredictRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getModelParamJobUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getModelId();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTable();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.libctomanage.JoinOrder.serializeBinaryToWriter
    );
  }
  f = message.getSrcList();
  if (f.length > 0) {
    writer.writePackedInt32(
      5,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string job_uuid = 1;
 * @return {string}
 */
proto.libctomanage.PredictRequest.prototype.getJobUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.PredictRequest} returns this
 */
proto.libctomanage.PredictRequest.prototype.setJobUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string model_param_job_uuid = 2;
 * @return {string}
 */
proto.libctomanage.PredictRequest.prototype.getModelParamJobUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.PredictRequest} returns this
 */
proto.libctomanage.PredictRequest.prototype.setModelParamJobUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional pb_common_types.PredictMethod model_id = 3;
 * @return {!proto.pb_common_types.PredictMethod}
 */
proto.libctomanage.PredictRequest.prototype.getModelId = function() {
  return /** @type {!proto.pb_common_types.PredictMethod} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.pb_common_types.PredictMethod} value
 * @return {!proto.libctomanage.PredictRequest} returns this
 */
proto.libctomanage.PredictRequest.prototype.setModelId = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional JoinOrder table = 4;
 * @return {?proto.libctomanage.JoinOrder}
 */
proto.libctomanage.PredictRequest.prototype.getTable = function() {
  return /** @type{?proto.libctomanage.JoinOrder} */ (
    jspb.Message.getWrapperField(this, proto.libctomanage.JoinOrder, 4));
};


/**
 * @param {?proto.libctomanage.JoinOrder|undefined} value
 * @return {!proto.libctomanage.PredictRequest} returns this
*/
proto.libctomanage.PredictRequest.prototype.setTable = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.libctomanage.PredictRequest} returns this
 */
proto.libctomanage.PredictRequest.prototype.clearTable = function() {
  return this.setTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.libctomanage.PredictRequest.prototype.hasTable = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated int32 src = 5;
 * @return {!Array<number>}
 */
proto.libctomanage.PredictRequest.prototype.getSrcList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.libctomanage.PredictRequest} returns this
 */
proto.libctomanage.PredictRequest.prototype.setSrcList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.libctomanage.PredictRequest} returns this
 */
proto.libctomanage.PredictRequest.prototype.addSrc = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.libctomanage.PredictRequest} returns this
 */
proto.libctomanage.PredictRequest.prototype.clearSrcList = function() {
  return this.setSrcList([]);
};


/**
 * optional string token = 6;
 * @return {string}
 */
proto.libctomanage.PredictRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.PredictRequest} returns this
 */
proto.libctomanage.PredictRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.PredictResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.PredictResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.PredictResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.PredictResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isOk: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.PredictResponse}
 */
proto.libctomanage.PredictResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.PredictResponse;
  return proto.libctomanage.PredictResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.PredictResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.PredictResponse}
 */
proto.libctomanage.PredictResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.PredictResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.PredictResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.PredictResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.PredictResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsOk();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.libctomanage.PredictResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.PredictResponse} returns this
 */
proto.libctomanage.PredictResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_ok = 2;
 * @return {boolean}
 */
proto.libctomanage.PredictResponse.prototype.getIsOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.libctomanage.PredictResponse} returns this
 */
proto.libctomanage.PredictResponse.prototype.setIsOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.GetDataListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.GetDataListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.GetDataListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.GetDataListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.GetDataListRequest}
 */
proto.libctomanage.GetDataListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.GetDataListRequest;
  return proto.libctomanage.GetDataListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.GetDataListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.GetDataListRequest}
 */
proto.libctomanage.GetDataListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.GetDataListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.GetDataListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.GetDataListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.GetDataListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.libctomanage.GetDataListRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.GetDataListRequest} returns this
 */
proto.libctomanage.GetDataListRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libctomanage.GetDataListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.libctomanage.GetDataListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libctomanage.GetDataListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.GetDataListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isOk: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libctomanage.GetDataListResponse}
 */
proto.libctomanage.GetDataListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libctomanage.GetDataListResponse;
  return proto.libctomanage.GetDataListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libctomanage.GetDataListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libctomanage.GetDataListResponse}
 */
proto.libctomanage.GetDataListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libctomanage.GetDataListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libctomanage.GetDataListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libctomanage.GetDataListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libctomanage.GetDataListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsOk();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.libctomanage.GetDataListResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libctomanage.GetDataListResponse} returns this
 */
proto.libctomanage.GetDataListResponse.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_ok = 2;
 * @return {boolean}
 */
proto.libctomanage.GetDataListResponse.prototype.getIsOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.libctomanage.GetDataListResponse} returns this
 */
proto.libctomanage.GetDataListResponse.prototype.setIsOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


goog.object.extend(exports, proto.libctomanage);
